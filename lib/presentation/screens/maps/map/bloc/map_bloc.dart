import 'package:flutter_bloc/flutter_bloc.dart';
import 'map_event.dart';
import 'map_state.dart';
import 'package:acti_mobile/data/models/profile_event_model.dart';
import 'package:geolocator/geolocator.dart' as geolocator;
import 'dart:math' as math;
import 'package:mapbox_maps_flutter/mapbox_maps_flutter.dart';

class _EventWithScreen {
  final OrganizedEventModel event;
  final ScreenCoordinate screen;
  _EventWithScreen(this.event, this.screen);
}

class MapBloc extends Bloc<MapEvent, MapState> {
  MapboxMap? mapboxMap;
  int _markerVersion = 0;

  // –ö—ç—à –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∑—É–º—É
  final Map<int, List<List<OrganizedEventModel>>> _zoomClusterCache = {};
  List<OrganizedEventModel> _lastEvents = [];

  // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
  List<OrganizedEventModel> _serverEventsCache = [];

  MapBloc({this.mapboxMap}) : super(const MapState()) {
    on<LoadEvents>(_onLoadEvents);
    on<ZoomChanged>(_onZoomChanged);
    on<UpdateMarkers>(_onUpdateMarkers);
    on<ApplyFilter>(_onApplyFilter);
  }

  void setMapbox(MapboxMap map) {
    mapboxMap = map;
    print('[DEBUG] MapBloc: mapboxMap —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  void _onLoadEvents(LoadEvents event, Emitter<MapState> emit) async {
    _markerVersion++;
    final currentVersion = _markerVersion;
    emit(state.copyWith(isLoading: true));
    _serverEventsCache = List.from(event.events); // –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞

    // –°—á–∏—Ç–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∑—É–º–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ
    for (final z in [6, 8, 10, 12, 14, 16, 18]) {
      _zoomClusterCache[z] =
          _groupEventsByGrid(_serverEventsCache, z.toDouble());
    }

    if (currentVersion != _markerVersion) return;
    // –ë–µ—Ä—ë–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞
    final grouped = _zoomClusterCache[state.zoom.round()] ??
        _groupEventsByGrid(_serverEventsCache, state.zoom);
    emit(state.copyWith(isLoading: false, groupedEvents: grouped));
  }

  void _onZoomChanged(ZoomChanged event, Emitter<MapState> emit) async {
    _markerVersion++;
    final currentVersion = _markerVersion;
    emit(state.copyWith(zoom: event.zoom, isLoading: true));
    // –ë–µ—Ä—ë–º –≥—Ä—É–ø–ø—ã –∏–∑ –∫—ç—à–∞
    final grouped = _zoomClusterCache[event.zoom.round()] ??
        _groupEventsByGrid(_serverEventsCache, event.zoom);
    if (currentVersion != _markerVersion) return;
    emit(state.copyWith(isLoading: false, groupedEvents: grouped));
  }

  void _onUpdateMarkers(UpdateMarkers event, Emitter<MapState> emit) async {
    _markerVersion++;
    final currentVersion = _markerVersion;
    emit(state.copyWith(isLoading: true));
    final grouped = await _groupEventsByScreenPixels(
        _flatten(state.groupedEvents), state.zoom);
    if (currentVersion != _markerVersion) {
      print(
          '[DEBUG] MapBloc: –æ—Ç–º–µ–Ω—è—é —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é (UpdateMarkers)');
      return;
    }
    emit(state.copyWith(isLoading: false, groupedEvents: grouped));
  }

  void _onApplyFilter(ApplyFilter event, Emitter<MapState> emit) async {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    // emit(state.copyWith(...));
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –≥—Ä–∞–¥–∞—Ü–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏ –ø–æ –∑—É–º—É
  double getCellSizeForZoom(double zoom) {
    if (zoom < 7) return 0.02;
    if (zoom < 9) return 0.01;
    if (zoom < 11) return 0.005;
    if (zoom < 13) return 0.002;
    if (zoom < 14) return 0.008;
    if (zoom < 15) return 0.0008;
    if (zoom < 17) return 0.0003;
    return 0.0001;
  }

  List<List<OrganizedEventModel>> _groupEventsByGridCached(
      List<OrganizedEventModel> events, double zoom) {
    final int zoomKey = zoom.round();
    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏ –µ—Å—Ç—å –∫—ç—à ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à
    if (_lastEvents.length == events.length &&
        _lastEvents.every((e) => events.contains(e)) &&
        _zoomClusterCache.containsKey(zoomKey)) {
      return _zoomClusterCache[zoomKey]!;
    }
    // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
    if (_lastEvents.length != events.length ||
        !_lastEvents.every((e) => events.contains(e))) {
      _zoomClusterCache.clear();
      _lastEvents = List.from(events);
    }
    // –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    final grouped = _groupEventsByGrid(events, zoom);
    _zoomClusterCache[zoomKey] = grouped;
    return grouped;
  }

  // –ù–æ–≤–∞—è –±—ã—Å—Ç—Ä–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ—Ç–∫–µ (grid-based)
  List<List<OrganizedEventModel>> _groupEventsByGrid(
      List<OrganizedEventModel> events, double zoom) {
    final double cellSize = getCellSizeForZoom(zoom);
    final Map<String, List<OrganizedEventModel>> grid = {};
    for (final event in events) {
      if (event.latitude == null || event.longitude == null) continue;
      final latKey = (event.latitude! / cellSize).floor();
      final lngKey = (event.longitude! / cellSize).floor();
      final key = '\u001b[32m$latKey:$lngKey\u001b[0m';
      grid.putIfAbsent(key, () => []).add(event);
    }
    final result = grid.values.toList();
    print(
        '[DEBUG] MapBloc: —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (grid): \u001b[32m[32m${result.length}\u001b[0m');
    return result;
  }

  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é —Å –∫—ç—à–µ–º
  Future<List<List<OrganizedEventModel>>> _groupEventsByScreenPixels(
      List<OrganizedEventModel> events, double zoom) async {
    return _groupEventsByGridCached(events, zoom);
  }

  List<OrganizedEventModel> _flatten(List<List<OrganizedEventModel>> groups) {
    return groups.expand((g) => g).toList();
  }
}
